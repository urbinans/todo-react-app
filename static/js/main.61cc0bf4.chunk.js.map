{"version":3,"sources":["TaskItem.js","TaskLister.js","TaskAdder.js","App.js","registerServiceWorker.js","index.js"],"names":["TaskItem","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","edit","handleDel","bind","assertThisInitialized","handleTaskStatusChange","toggleEdit","handleSaveEdit","handleCancelEdit","taskId","setState","prevState","newDesc","document","getElementById","value","window","confirm","actions","styles","smallIcon","width","height","small","padding","borderWidth","react_default","a","createElement","className","IconButton_default","iconStyle","style","onClick","save_default","clear_default","color","edit_default","delete_default","taskDesc","type","id","defaultValue","description","Checkbox_default","defaultChecked","checked","onCheck","Component","TaskLister","_this2","items","tasks","map","task","src_TaskItem_0","key","done","Paper_default","title","Divider_default","TaskAdder","newTask","handleChange","handleSave","handleCancel","e","target","element","addNewTask","TextField_default","hintText","floatingLabelText","multiLine","onChange","RaisedButton_default","label","primary","secondary","handleNewTask","App","idCount","drawerIsOpen","handleReset","handleOpenDrawer","push","filter","doneTasks","undoneTasks","MuiThemeProvider_default","AppBar_default","onLeftIconButtonClick","Drawer_default","open","docked","MenuItem_default","disabled","primaryText","src_TaskLister_0","src_TaskAdder_0","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","catch","error","ReactDOM","render","src_App_0","URL","process","origin","addEventListener","concat","fetch","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"wjBA2GeA,sBAjGb,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KACDQ,MAAQ,CACXC,MAAM,GAERR,EAAKS,UAAYT,EAAKS,UAAUC,KAAfT,OAAAU,EAAA,EAAAV,CAAAD,IACjBA,EAAKY,uBAAyBZ,EAAKY,uBAAuBF,KAA5BT,OAAAU,EAAA,EAAAV,CAAAD,IAC9BA,EAAKa,WAAab,EAAKa,WAAWH,KAAhBT,OAAAU,EAAA,EAAAV,CAAAD,IAClBA,EAAKc,eAAiBd,EAAKc,eAAeJ,KAApBT,OAAAU,EAAA,EAAAV,CAAAD,IACtBA,EAAKe,iBAAmBf,EAAKe,iBAAiBL,KAAtBT,OAAAU,EAAA,EAAAV,CAAAD,IATPA,2EAajBG,KAAKJ,MAAMU,UAAUN,KAAKJ,MAAMiB,yDAIhCb,KAAKJ,MAAMa,uBAAuBT,KAAKJ,MAAMiB,6CAI7Cb,KAAKc,SAAS,SAAAC,GACZ,MAAO,CAACV,MAAOU,EAAUV,iDAK3BL,KAAKU,aACL,IAAMM,EAAUC,SAASC,eAAe,YAAYC,MACpDnB,KAAKJ,MAAMe,eAAeX,KAAKJ,MAAMiB,OAAQG,8CAIzCI,OAAOC,QAAQ,oDACjBrB,KAAKU,8CAKP,IAAIY,EAAU,KACRC,EAAS,CACbC,UAAW,CACTC,MAAO,GACPC,OAAQ,IAEVC,MAAO,CACLF,MAAO,GACPC,OAAQ,GACRE,QAAS,EACTC,YAAa,QAKfP,EADEtB,KAAKI,MAAMC,KAEXyB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gBACbH,EAAAC,EAAAC,cAACE,EAAAH,EAAD,CAAYI,UAAWZ,EAAOC,UAAWY,MAAOb,EAAOI,MAAQU,QAASrC,KAAKW,gBAC3EmB,EAAAC,EAAAC,cAACM,EAAAP,EAAD,OAEFD,EAAAC,EAAAC,cAACE,EAAAH,EAAD,CAAYI,UAAWZ,EAAOC,UAAWY,MAAOb,EAAOI,MAAQU,QAASrC,KAAKY,kBAC3EkB,EAAAC,EAAAC,cAACO,EAAAR,EAAD,CAAQS,MAAM,cAOlBV,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gBACbH,EAAAC,EAAAC,cAACE,EAAAH,EAAD,CAAYE,UAAU,YAAYE,UAAWZ,EAAOC,UAAWY,MAAOb,EAAOI,MAAOU,QAASrC,KAAKU,YAChGoB,EAAAC,EAAAC,cAACS,EAAAV,EAAD,CAAMS,MAAM,aAEdV,EAAAC,EAAAC,cAACE,EAAAH,EAAD,CAAYE,UAAU,cAAcE,UAAWZ,EAAOC,UAAWY,MAAOb,EAAOI,MAAMU,QAASrC,KAAKM,WACjGwB,EAAAC,EAAAC,cAACU,EAAAX,EAAD,CAAQS,MAAM,cAMtB,IAAIG,EAAW,KAUf,OAREA,EADE3C,KAAKI,MAAMC,KACFyB,EAAAC,EAAAC,cAAA,SAAOY,KAAK,OAAOC,GAAG,WAAWZ,UAAU,YAAYa,aAAc9C,KAAKJ,MAAMmD,cAEhFjB,EAAAC,EAAAC,cAAA,QAAMC,UAAU,aACfH,EAAAC,EAAAC,cAACgB,EAAAjB,EAAD,CAAUK,MAAO,CAACX,MAAM,OAAQwB,eAAgBjD,KAAKJ,MAAMsD,QAASC,QAASnD,KAAKS,yBACjFT,KAAKJ,MAAMmD,aAKxBjB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACZU,EACArB,UA5Fc8B,cC0CRC,cA5Cb,SAAAA,EAAYzD,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAqD,IACjBxD,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAuD,GAAAlD,KAAAH,KAAMJ,KACDU,UAAYT,EAAKS,UAAUC,KAAfT,OAAAU,EAAA,EAAAV,CAAAD,IACjBA,EAAKY,uBAAyBZ,EAAKY,uBAAuBF,KAA5BT,OAAAU,EAAA,EAAAV,CAAAD,IAC9BA,EAAKc,eAAiBd,EAAKc,eAAeJ,KAApBT,OAAAU,EAAA,EAAAV,CAAAD,IAJLA,yEAOTgB,GACRb,KAAKJ,MAAMU,UAAUO,kDAGAA,GACrBb,KAAKJ,MAAMa,uBAAuBI,0CAGrBA,EAAOG,GACpBhB,KAAKJ,MAAMe,eAAeE,EAAOG,oCAG1B,IAAAsC,EAAAtD,KACDuD,EAAQvD,KAAKJ,MAAM4D,MAAMC,IAAI,SAAAC,GACjC,OACE5B,EAAAC,EAAAC,cAAC2B,EAAD,CACEC,IAAKF,EAAKb,GACVhC,OAAQ6C,EAAKb,GACbK,QAASQ,EAAKG,KACdd,YAAaW,EAAKX,YAClBzC,UAAWgD,EAAKhD,UAChBG,uBAAwB6C,EAAK7C,uBAC7BE,eAAgB2C,EAAK3C,mBAK3B,OACEmB,EAAAC,EAAAC,cAAC8B,EAAA/B,EAAD,CAAOE,UAAU,UACfH,EAAAC,EAAAC,cAAA,QAAMC,UAAU,gBAAgBjC,KAAKJ,MAAMmE,OAAajC,EAAAC,EAAAC,cAAA,WACxDF,EAAAC,EAAAC,cAACgC,EAAAjC,EAAD,MACCwB,UAvCgBH,gDC6DVa,sBA7Db,SAAAA,EAAYrE,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAiE,IACjBpE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAmE,GAAA9D,KAAAH,KAAMJ,KACDQ,MAAQ,CACX8D,QAAS,IAEXrE,EAAKsE,aAAetE,EAAKsE,aAAa5D,KAAlBT,OAAAU,EAAA,EAAAV,CAAAD,IACpBA,EAAKuE,WAAavE,EAAKuE,WAAW7D,KAAhBT,OAAAU,EAAA,EAAAV,CAAAD,IAClBA,EAAKwE,aAAexE,EAAKwE,aAAa9D,KAAlBT,OAAAU,EAAA,EAAAV,CAAAD,IAPHA,4EAWjBG,KAAKJ,MAAMwE,WAAWpE,KAAKI,MAAM8D,SACjClE,KAAKc,SAAS,CACZoD,QAAS,4CAKXlE,KAAKJ,MAAMyE,eACXrE,KAAKc,SAAS,CACZoD,QAAS,0CAIAI,GACXtE,KAAKc,SAAS,CACZoD,QAASI,EAAEC,OAAOpD,yCAKpB,IAAIqD,EAAU,KAsBd,OApBEA,EADExE,KAAKJ,MAAM6E,WACH3C,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cACbH,EAAAC,EAAAC,cAAC0C,EAAA3C,EAAD,CACE4C,SAAS,WACTC,kBAAkB,0BAClBC,WAAW,EACX/B,aAAc9C,KAAKI,MAAM8D,QACzBY,SAAU9E,KAAKmE,eAGjBrC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBACbH,EAAAC,EAAAC,cAAC+C,EAAAhD,EAAD,CAAciD,MAAM,YAAYC,SAAS,EAAM5C,QAASrC,KAAKoE,aAC7DtC,EAAAC,EAAAC,cAAC+C,EAAAhD,EAAD,CAAciD,MAAM,SAASE,WAAW,EAAM7C,QAASrC,KAAKqE,iBAIhEvC,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAC+C,EAAAhD,EAAD,CAAckD,SAAS,EAAMD,MAAM,WAAW3C,QAASrC,KAAKJ,MAAMuF,iBAK9ErD,EAAAC,EAAAC,cAAA,WACGwC,UAxDepB,cCyMTgC,cA/Lb,SAAAA,EAAYxF,GAAO,IAAAC,EAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAoF,GAAA,OACjBvF,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAsF,GAAAjF,KAAAH,KAAMJ,KAgCDQ,MAAQ,CACXqE,YAAY,EACZjB,MA9BY,CACZ,CACEX,GAAM,EACNE,YAAe,mBACfc,MAAQ,GAEV,CACEhB,GAAM,EACNE,YAAe,uBACfc,MAAQ,GAEV,CACEhB,GAAM,EACNE,YAAe,oBACfc,MAAQ,GAEV,CACEhB,GAAM,EACNE,YAAe,mBACfc,MAAQ,GAEV,CACEhB,GAAM,EACNE,YAAe,4BACfc,MAAQ,IAOVwB,QAAS,EACTC,cAAc,GAEhBzF,EAAKsF,cAAgBtF,EAAKsF,cAAc5E,KAAnBT,OAAAU,EAAA,EAAAV,CAAAD,IACrBA,EAAKuE,WAAavE,EAAKuE,WAAW7D,KAAhBT,OAAAU,EAAA,EAAAV,CAAAD,IAClBA,EAAKwE,aAAexE,EAAKwE,aAAa9D,KAAlBT,OAAAU,EAAA,EAAAV,CAAAD,IACpBA,EAAKS,UAAYT,EAAKS,UAAUC,KAAfT,OAAAU,EAAA,EAAAV,CAAAD,IACjBA,EAAKY,uBAAyBZ,EAAKY,uBAAuBF,KAA5BT,OAAAU,EAAA,EAAAV,CAAAD,IAC9BA,EAAKc,eAAiBd,EAAKc,eAAeJ,KAApBT,OAAAU,EAAA,EAAAV,CAAAD,IACtBA,EAAK0F,YAAc1F,EAAK0F,YAAYhF,KAAjBT,OAAAU,EAAA,EAAAV,CAAAD,IACnBA,EAAK2F,iBAAmB3F,EAAK2F,iBAAiBjF,KAAtBT,OAAAU,EAAA,EAAAV,CAAAD,IA9CPA,+EAmDjBG,KAAKc,SAAS,CACZ2D,YAAY,uCAOLtD,GACT,GAAc,KAAVA,EAAc,CAChB,IAAIqC,EAAQxD,KAAKI,MAAMoD,MACvBA,EAAMiC,KAAK,CACT5C,GAAM7C,KAAKI,MAAMiF,QAAU,EAC3BtC,YAAe5B,EACf0C,MAAQ,IAEV7D,KAAKc,SAAS,CACZ2D,YAAY,EACZf,KAAMF,EACN6B,QAASrF,KAAKI,MAAMiF,QAAU,SAGhCrF,KAAKc,SAAS,CACZ2D,YAAY,2CAOZrD,OAAOC,QAAQ,kEACjBrB,KAAKc,SAAS,CACZ2D,YAAY,sCAMR5D,GACR,IAAM2C,EAAQxD,KAAKI,MAAMoD,MAAMkC,OAAO,SAAAhC,GACpC,OAAOA,EAAKb,KAAOhC,IAErBb,KAAKc,SAAS,CACZ0C,MAAOA,mDAKY3C,GACrB,IAAM2C,EAAQxD,KAAKI,MAAMoD,MAAMC,IAAI,SAAAC,GAIjC,OAHIA,EAAKb,KAAOhC,IACd6C,EAAKG,MAAQH,EAAKG,MAEbH,IAET1D,KAAKc,SAAS,CACZ0C,MAAOA,2CAOI3C,EAAOG,GACpB,GAAgB,KAAZA,EACFhB,KAAKM,UAAUO,OACV,CACL,IAAM2C,EAAQxD,KAAKI,MAAMoD,MAAMC,IAAI,SAAAC,GAIjC,OAHIA,EAAKb,KAAOhC,IACd6C,EAAKX,YAAc/B,GAEd0C,IAET1D,KAAKc,SAAS,CACZ0C,MAAOA,2CAOPpC,OAAOC,QAAQ,6DACjBrB,KAAKc,SAAS,CAAC0C,MAAO,gDAKxBxD,KAAKc,SAAS,SAAAC,GACZ,MAAO,CAACuE,cAAevE,EAAUuE,iDAKnC,IAAMK,EAAY3F,KAAKI,MAAMoD,MAAMkC,OAAO,SAAAhC,GACxC,OAAqB,IAAdA,EAAKG,OAGR+B,EAAc5F,KAAKI,MAAMoD,MAAMkC,OAAO,SAAAhC,GAC1C,OAAqB,IAAdA,EAAKG,OAGd,OACE/B,EAAAC,EAAAC,cAAC6D,EAAA9D,EAAD,KACED,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAC8D,EAAA/D,EAAD,CAAQgC,MAAM,eAAegC,sBAAuB/F,KAAKwF,mBACzD1D,EAAAC,EAAAC,cAACgE,EAAAjE,EAAD,CAAQkE,KAAMjG,KAAKI,MAAMkF,aAAcY,QAAQ,GAC7CpE,EAAAC,EAAAC,cAACmE,EAAApE,EAAD,CAAUqE,UAAU,GAApB,aACAtE,EAAAC,EAAAC,cAACgC,EAAAjC,EAAD,MACAD,EAAAC,EAAAC,cAACmE,EAAApE,EAAD,CAAUsE,YAAY,aAAahE,QAASrC,KAAKuF,cACjDzD,EAAAC,EAAAC,cAACmE,EAAApE,EAAD,CAAUsE,YAAY,QAAQhE,QAASrC,KAAKwF,oBAE9C1D,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eACbH,EAAAC,EAAAC,cAACsE,EAAD,CACEvC,MAAM,SACNP,MAAOoC,EACPtF,UAAWN,KAAKM,UAChBG,uBAAwBT,KAAKS,uBAC7BE,eAAgBX,KAAKW,iBAEvBmB,EAAAC,EAAAC,cAACsE,EAAD,CACEvC,MAAM,OACNP,MAAOmC,EACPrF,UAAWN,KAAKM,UAChBG,uBAAwBT,KAAKS,uBAC7BE,eAAgBX,KAAKW,kBAGzBmB,EAAAC,EAAAC,cAACuE,EAAD,CACErC,QAASlE,KAAKI,MAAM8D,QACpBE,WAAYpE,KAAKoE,WACjBC,aAAcrE,KAAKqE,aACnBc,cAAenF,KAAKmF,cACpBV,WAAYzE,KAAKI,MAAMqE,sBAxLjBrB,aCJZoD,EAAcC,QACW,cAA7BrF,OAAOsF,SAASC,UAEe,UAA7BvF,OAAOsF,SAASC,UAEhBvF,OAAOsF,SAASC,SAASC,MACvB,2DAsCN,SAASC,EAAgBC,GACvBC,UAAUC,cACPC,SAASH,GACTI,KAAK,SAAAC,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACtCD,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBjH,QACf2G,UAAUC,cAAcQ,WAK1BC,QAAQC,IAAI,6CAKZD,QAAQC,IAAI,2CAMrBC,MAAM,SAAAC,GACLH,QAAQG,MAAM,4CAA6CA,KCzEjEC,IAASC,OAAOhG,EAAAC,EAAAC,cAAC+F,EAAD,MAAS9G,SAASC,eAAe,SDclC,WACb,GAA6C,kBAAmB6F,UAAW,CAGzE,GADkB,IAAIiB,IAAIC,kBAAwB7G,OAAOsF,UAC3CwB,SAAW9G,OAAOsF,SAASwB,OAIvC,OAGF9G,OAAO+G,iBAAiB,OAAQ,WAC9B,IAAMrB,EAAK,GAAAsB,OAAMH,kBAAN,sBAEPzB,GAiDV,SAAiCM,GAE/BuB,MAAMvB,GACHI,KAAK,SAAAoB,GAGkB,MAApBA,EAASC,SACuD,IAAhED,EAASE,QAAQC,IAAI,gBAAgBC,QAAQ,cAG7C3B,UAAUC,cAAc2B,MAAMzB,KAAK,SAAAC,GACjCA,EAAayB,aAAa1B,KAAK,WAC7B9F,OAAOsF,SAASmC,aAKpBhC,EAAgBC,KAGnBa,MAAM,WACLF,QAAQC,IACN,mEArEAoB,CAAwBhC,GAIxBC,UAAUC,cAAc2B,MAAMzB,KAAK,WACjCO,QAAQC,IACN,+GAMJb,EAAgBC,MCzCxBiC","file":"static/js/main.61cc0bf4.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport IconButton from 'material-ui/IconButton';\r\nimport Checkbox from 'material-ui/Checkbox';\r\nimport Delete from 'material-ui/svg-icons/action/delete';\r\nimport Edit from 'material-ui/svg-icons/image/edit';\r\nimport Save from 'material-ui/svg-icons/content/save';\r\nimport Cancel from 'material-ui/svg-icons/content/clear';\r\nimport './TaskItem.css';\r\n\r\nclass TaskItem extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      edit: false\r\n    };\r\n    this.handleDel = this.handleDel.bind(this);\r\n    this.handleTaskStatusChange = this.handleTaskStatusChange.bind(this);\r\n    this.toggleEdit = this.toggleEdit.bind(this);\r\n    this.handleSaveEdit = this.handleSaveEdit.bind(this);\r\n    this.handleCancelEdit = this.handleCancelEdit.bind(this);\r\n  }\r\n\r\n  handleDel() {\r\n    this.props.handleDel(this.props.taskId);\r\n  }\r\n\r\n  handleTaskStatusChange() {\r\n    this.props.handleTaskStatusChange(this.props.taskId);\r\n  }\r\n\r\n  toggleEdit() {\r\n    this.setState(prevState => {\r\n      return {edit: !prevState.edit}; \r\n    });\r\n  }\r\n\r\n  handleSaveEdit() {\r\n    this.toggleEdit();\r\n    const newDesc = document.getElementById(\"taskEdit\").value;\r\n    this.props.handleSaveEdit(this.props.taskId, newDesc);\r\n  }\r\n\r\n  handleCancelEdit() {\r\n    if (window.confirm(\"Are you sure you want to discard these changes?\")) {\r\n      this.toggleEdit();\r\n    }\r\n  }\r\n\r\n  render() {\r\n    let actions = null;\r\n    const styles = {\r\n      smallIcon: {\r\n        width: 20,\r\n        height: 20\r\n      },\r\n      small: {\r\n        width: 20,\r\n        height: 20,\r\n        padding: 0,\r\n        borderWidth: '0px'\r\n      }\r\n    };\r\n\r\n    if (this.state.edit) {\r\n      actions = (\r\n        <div className=\"Task-actions\">\r\n          <IconButton iconStyle={styles.smallIcon} style={styles.small}  onClick={this.handleSaveEdit} >\r\n            <Save />\r\n          </IconButton>\r\n          <IconButton iconStyle={styles.smallIcon} style={styles.small}  onClick={this.handleCancelEdit} >\r\n            <Cancel color=\"#c82333\" />\r\n          </IconButton>\r\n        </div>\r\n      );\r\n                \r\n    } else {\r\n      actions = (\r\n        <div className=\"Task-actions\">\r\n          <IconButton className=\"Task-edit\" iconStyle={styles.smallIcon} style={styles.small} onClick={this.toggleEdit} >\r\n            <Edit color=\"#e0a800\" />\r\n          </IconButton>\r\n          <IconButton className=\"Task-delete\" iconStyle={styles.smallIcon} style={styles.small}onClick={this.handleDel} >\r\n            <Delete color=\"#c82333\" />\r\n          </IconButton>\r\n        </div>\r\n      );\r\n    } \r\n\r\n    let taskDesc = null;\r\n    if (this.state.edit) {\r\n      taskDesc = <input type=\"text\" id=\"taskEdit\" className=\"Task-desc\" defaultValue={this.props.description} />\r\n    } else {\r\n      taskDesc = <span className=\"Task-desc\">\r\n                  <Checkbox style={{width:'0px'}} defaultChecked={this.props.checked} onCheck={this.handleTaskStatusChange} />\r\n                  {this.props.description}\r\n                 </span>\r\n    }\r\n\r\n    return (\r\n      <div className=\"Task\">\r\n        {taskDesc}\r\n        {actions}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default TaskItem;\r\n","import React, { Component } from 'react';\nimport Paper from 'material-ui/Paper';\nimport Divider from 'material-ui/Divider';\nimport './TaskLister.css';\nimport TaskItem from './TaskItem';\n\nclass TaskLister extends Component {\n  constructor(props) {\n    super(props);\n    this.handleDel = this.handleDel.bind(this);\n    this.handleTaskStatusChange = this.handleTaskStatusChange.bind(this);\n    this.handleSaveEdit = this.handleSaveEdit.bind(this);\n  }\n\n  handleDel(taskId) {\n    this.props.handleDel(taskId);\n  }\n\n  handleTaskStatusChange(taskId) {\n    this.props.handleTaskStatusChange(taskId);\n  }\n\n  handleSaveEdit(taskId,newDesc) {\n    this.props.handleSaveEdit(taskId,newDesc);\n  }\n\n  render() {\n    const items = this.props.tasks.map(task => {\n      return (\n        <TaskItem\n          key={task.id}\n          taskId={task.id}\n          checked={task.done}\n          description={task.description}\n          handleDel={this.handleDel}\n          handleTaskStatusChange={this.handleTaskStatusChange}\n          handleSaveEdit={this.handleSaveEdit}\n        />\n      );\n    });\n\n    return (\n      <Paper className=\"Lister\">\n        <span className=\"Lister-title\">{this.props.title}</span><br />\n        <Divider />\n        {items}\n      </Paper>\n    );\n  }\n}\n\nexport default TaskLister;\n","import React, { Component } from 'react';\r\nimport RaisedButton from 'material-ui/RaisedButton';\r\nimport TextField from 'material-ui/TextField';\r\nimport './TaskAdder.css'\r\n\r\nclass TaskAdder extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      newTask: \"\"\r\n    };\r\n    this.handleChange = this.handleChange.bind(this);\r\n    this.handleSave = this.handleSave.bind(this);\r\n    this.handleCancel = this.handleCancel.bind(this);\r\n  }\r\n\r\n  handleSave() {\r\n    this.props.handleSave(this.state.newTask);\r\n    this.setState({\r\n      newTask: \"\"\r\n    });\r\n  }\r\n\r\n  handleCancel() {\r\n    this.props.handleCancel();\r\n    this.setState({\r\n      newTask: \"\"\r\n    });\r\n  }\r\n\r\n  handleChange(e) {\r\n    this.setState({\r\n      newTask: e.target.value\r\n    });\r\n  }\r\n\r\n  render() {\r\n    let element = null;\r\n    if (this.props.addNewTask) {\r\n      element = <div className=\"Task-adder\">\r\n                  <TextField\r\n                    hintText=\"New Task\"\r\n                    floatingLabelText=\"Please, add a new task:\"\r\n                    multiLine={true}\r\n                    defaultValue={this.state.newTask}\r\n                    onChange={this.handleChange}\r\n//                    floatingLabelStyle={{display: 'block'}}\r\n                  />\r\n                  <div className=\"Adder-buttons\">\r\n                    <RaisedButton label=\"Save Task\" primary={true} onClick={this.handleSave} />\r\n                    <RaisedButton label=\"Cancel\" secondary={true} onClick={this.handleCancel} />\r\n                  </div>\r\n                </div>\r\n    } else {\r\n      element = <div>\r\n                  <RaisedButton primary={true} label=\"New Task\" onClick={this.props.handleNewTask} />\r\n                </div>\r\n    }\r\n\r\n    return (\r\n      <div>\r\n        {element}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default TaskAdder;\r\n","/*  Name: Todo React App\r\n*   Author: Nelson Urbina\r\n*/\r\n\r\nimport React, { Component } from 'react';\r\nimport MuiThemeProvider from 'material-ui/styles/MuiThemeProvider';\r\nimport AppBar from 'material-ui/AppBar';\r\nimport Drawer from 'material-ui/Drawer';\r\nimport Divider from 'material-ui/Divider';\r\nimport MenuItem from 'material-ui/MenuItem';\r\nimport './App.css';\r\nimport TaskLister from './TaskLister';\r\nimport TaskAdder from './TaskAdder';\r\n\r\nclass App extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    /*  The \"task\" variable will have some dummy data to show on first run. This can be cleared using\r\n    *   the reset button on the app\r\n    */\r\n    const tasks = [\r\n      {\r\n        \"id\": 1,\r\n        \"description\": \"This is one task\",\r\n        \"done\": false\r\n      },\r\n      {\r\n        \"id\": 2,\r\n        \"description\": \"This is another task\",\r\n        \"done\": false\r\n      },\r\n      {\r\n        \"id\": 3,\r\n        \"description\": \"This task is done\",\r\n        \"done\": true\r\n      },\r\n      {\r\n        \"id\": 4,\r\n        \"description\": \"Done, done, done\",\r\n        \"done\": true\r\n      },\r\n      {\r\n        \"id\": 5,\r\n        \"description\": \"This is yet one more task\",\r\n        \"done\": false\r\n      }\r\n    ];\r\n\r\n    this.state = {\r\n      addNewTask: false,\r\n      tasks: tasks,\r\n      idCount: 5,\r\n      drawerIsOpen: false\r\n    };\r\n    this.handleNewTask = this.handleNewTask.bind(this);\r\n    this.handleSave = this.handleSave.bind(this);\r\n    this.handleCancel = this.handleCancel.bind(this);\r\n    this.handleDel = this.handleDel.bind(this);\r\n    this.handleTaskStatusChange = this.handleTaskStatusChange.bind(this);\r\n    this.handleSaveEdit = this.handleSaveEdit.bind(this);\r\n    this.handleReset = this.handleReset.bind(this);\r\n    this.handleOpenDrawer = this.handleOpenDrawer.bind(this);\r\n  }\r\n\r\n  //  handleNewTask() will change the state of the app to render the section to add a new task\r\n  handleNewTask() {\r\n    this.setState({\r\n      addNewTask: true\r\n    });\r\n  }\r\n\r\n  /*  handleSave() will add a new task to the list. If the user leave the text box empty, it wil\r\n  *   return to the initial state of the app without changing the list\r\n  */\r\n  handleSave(value) {\r\n    if (value !== \"\") {\r\n      let tasks = this.state.tasks;\r\n      tasks.push({\r\n        \"id\": this.state.idCount + 1,\r\n        \"description\": value,\r\n        \"done\": false\r\n      });\r\n      this.setState({\r\n        addNewTask: false,\r\n        task: tasks,\r\n        idCount: this.state.idCount + 1\r\n      });\r\n    } else {\r\n      this.setState({\r\n        addNewTask: false,\r\n      });\r\n    }\r\n  }\r\n\r\n  //  handleCancel() will return the app to the initial state ignoring the user input\r\n  handleCancel() {\r\n    if (window.confirm(\"Are you sure you want to cancel?\\nAll your input will be lost\")) {\r\n      this.setState({\r\n        addNewTask: false\r\n      });\r\n    }\r\n  }\r\n\r\n  //  handleDel() deletes a task from the lists\r\n  handleDel(taskId) {\r\n    const tasks = this.state.tasks.filter(task => {\r\n      return task.id !== taskId;\r\n    });\r\n    this.setState({\r\n      tasks: tasks\r\n    });\r\n  }\r\n\r\n  //  handleTaskStatusChange() move a task between the done and undone sections\r\n  handleTaskStatusChange(taskId) {\r\n    const tasks = this.state.tasks.map(task => {\r\n      if (task.id === taskId) {\r\n        task.done = !task.done;\r\n      }\r\n      return task;\r\n    });\r\n    this.setState({\r\n      tasks: tasks\r\n    });\r\n  }\r\n\r\n  /* handleSaveEdit() will store the changes on a task description, but if the user clears the textbox\r\n  *  then it will completely remove the task from the list\r\n  */\r\n  handleSaveEdit(taskId,newDesc) {\r\n    if (newDesc === \"\") {\r\n      this.handleDel(taskId);\r\n    } else {\r\n      const tasks = this.state.tasks.map(task => {\r\n        if (task.id === taskId) {\r\n          task.description = newDesc;\r\n        }\r\n        return task;\r\n      });\r\n      this.setState({\r\n        tasks: tasks\r\n      });\r\n    }\r\n  }\r\n\r\n  // handleReset() will clear all the tasks from the list!\r\n  handleReset() {\r\n    if (window.confirm(\"This will clear all the tasks.\\nAre you sure to proceed?\")) {\r\n      this.setState({tasks: []});\r\n    }\r\n  }\r\n\r\n  handleOpenDrawer() {\r\n    this.setState(prevState => {\r\n      return {drawerIsOpen: !prevState.drawerIsOpen}\r\n    });\r\n  }\r\n\r\n  render() {\r\n    const doneTasks = this.state.tasks.filter(task => {\r\n      return task.done === true;\r\n    });\r\n\r\n    const undoneTasks = this.state.tasks.filter(task => {\r\n      return task.done === false;\r\n    });\r\n\r\n    return (\r\n      <MuiThemeProvider>\r\n        <div className=\"App\">\r\n          <AppBar title=\"My Todo List\" onLeftIconButtonClick={this.handleOpenDrawer} />\r\n          <Drawer open={this.state.drawerIsOpen} docked={false} >\r\n            <MenuItem disabled={true}>Main Menu</MenuItem>\r\n            <Divider />\r\n            <MenuItem primaryText=\"Reset List\" onClick={this.handleReset} />\r\n            <MenuItem primaryText=\"Close\" onClick={this.handleOpenDrawer} />\r\n          </Drawer>\r\n          <div className=\"App-listers\">\r\n            <TaskLister \r\n              title=\"Undone\"\r\n              tasks={undoneTasks}\r\n              handleDel={this.handleDel}\r\n              handleTaskStatusChange={this.handleTaskStatusChange}\r\n              handleSaveEdit={this.handleSaveEdit}\r\n            />\r\n            <TaskLister\r\n              title=\"Done\"\r\n              tasks={doneTasks}\r\n              handleDel={this.handleDel}\r\n              handleTaskStatusChange={this.handleTaskStatusChange}\r\n              handleSaveEdit={this.handleSaveEdit}\r\n            />\r\n          </div>\r\n          <TaskAdder\r\n            newTask={this.state.newTask}\r\n            handleSave={this.handleSave}\r\n            handleCancel={this.handleCancel}\r\n            handleNewTask={this.handleNewTask}\r\n            addNewTask={this.state.addNewTask}\r\n          />\r\n        </div>\r\n      </MuiThemeProvider>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport registerServiceWorker from './registerServiceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nregisterServiceWorker();\n"],"sourceRoot":""}